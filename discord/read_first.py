from database.db import create_user
import disnake
from disnake import Embed, Webhook, ui
from disnake.ext import commands
import asyncio

class LanguageSelect(ui.Select):
    def __init__(self, roles_config):
        self.roles_config = roles_config
        options = [
            disnake.SelectOption(
                label="–†—É—Å—Å–∫–∏–π",
                description="–î–æ—Å—Ç—É–ø –∫ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º",
                emoji="üá∑üá∫",
                value="russian"
            ),
            disnake.SelectOption(
                label="English",
                description="Access to English channels",
                emoji="üá¨üáß",
                value="english"
            ),
            disnake.SelectOption(
                label="–†—É—Å—Å–∫–∏–π + English",
                description="–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —è–∑—ã–∫–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º",
                emoji="üåê",
                value="bilingual"
            )
        ]
        super().__init__(
            custom_id="language_select",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        guild = interaction.guild
        member = interaction.author

        ru_role = guild.get_role(self.roles_config["language_roles"]["russian"])
        en_role = guild.get_role(self.roles_config["language_roles"]["english"])
        both_role = guild.get_role(self.roles_config["language_roles"]["bilingual"])

        try:
            create_user('discord', str(member.id))
            for role in [ru_role, en_role, both_role]:
                if role and role in member.roles:
                    await member.remove_roles(role)

            if self.values[0] == "russian" and ru_role:
                await member.add_roles(ru_role)
                await interaction.response.send_message(
                    "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **–†—É—Å—Å–∫–∏–π**\n\n"
                    "‚Ä¢ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç\n"
                    "‚Ä¢ –î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–Ω–∞–ª #üîß‚îÇ–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n"
                    "‚Ä¢ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å–µ—Ä–≤–µ—Ä–∞",
                    ephemeral=True
                )
            elif self.values[0] == "english" and en_role:
                await member.add_roles(en_role)
                await interaction.response.send_message(
                    "‚úÖ Language set to: **English**\n\n"
                    "‚Ä¢ This channel will be hidden\n"
                    "‚Ä¢ To change language use #üîß‚îÇpersonalization channel\n"
                    "‚Ä¢ You now have access to English channels",
                    ephemeral=True
                )
            elif self.values[0] == "bilingual" and both_role:
                await member.add_roles(both_role)
                await interaction.response.send_message(
                    "‚úÖ Language set to: **Russian + English**\n\n"
                    "‚Ä¢ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç\n"
                    "‚Ä¢ –î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ #üîß‚îÇ–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ #üîß‚îÇpersonalization\n"
                    "‚Ä¢ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –í–°–ï —è–∑—ã–∫–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã —Å–µ—Ä–≤–µ—Ä–∞",
                    ephemeral=True
                )
        except disnake.Forbidden:
            await interaction.response.send_message(
                "‚ùå –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏!",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                ephemeral=True
            )

class LanguageView(ui.View):
    def __init__(self, roles_config):
        super().__init__(timeout=None)
        self.roles_config = roles_config
        self.add_item(LanguageSelect(roles_config))

async def setup_read_first(bot: commands.Bot, guild_id: int, channel_id: int, webhook_config: dict, roles_config: dict):
    guild = bot.get_guild(guild_id)
    if not guild:
        return

    view = LanguageView(roles_config)
    bot.add_view(view)

    channel = guild.get_channel(channel_id)
    if not channel:
        return

    async for message in channel.history(limit=None):
        if not message.author.bot:
            try:
                await message.delete()
                await asyncio.sleep(0.3)
            except Exception:
                pass

    has_welcome_message = False
    async for message in channel.history(limit=100):
        if (message.author == bot.user or
            (isinstance(message.author, disnake.User) and message.author.display_name == webhook_config.get("name", "Omnicorp Bot"))):
            if message.embeds and any("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in embed.title or "Welcome" in embed.title for embed in message.embeds):
                has_welcome_message = True
                break

    if has_welcome_message:
        return

    try:
        webhook = await channel.create_webhook(
            name=webhook_config.get("name", "Omnicorp Bot")
        )

        embed = Embed(
            title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OmniCorp! / Welcome to OmniCorp!",
            description=(
                "**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:**\n"
                "**Please select your language:**\n\n"
                "‚Ä¢ –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–∞–Ω–∞–ª—ã\n"
                "‚Ä¢ Language selection will determine available channels\n\n"
                "üá∑üá∫ **–†—É—Å—Å–∫–∏–π** - –¥–æ—Å—Ç—É–ø –∫ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º\n"
                "üá¨üáß **English** - access to English channels\n"
                "üåê **–†—É—Å—Å–∫–∏–π + English** - –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú —è–∑—ã–∫–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º\n\n"
                "**–í–∞–∂–Ω–æ:**\n"
                "‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç\n"
                "‚Ä¢ –î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "  - #üîß‚îÇ–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è —Ä—É—Å—Å–∫–∏—Ö)\n"
                "  - #üîß‚îÇpersonalization (for English)\n\n"
                "_–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è_"
            ),
            color=disnake.Color.orange()
        )

        if "banner" in webhook_config and webhook_config["banner"]:
            embed.set_image(url=webhook_config["banner"])

        embed.set_footer(text="OmniCorp ¬© 2025")

        await webhook.send(
            embed=embed,
            username=webhook_config.get("name", "Omnicorp Bot"),
            avatar_url=webhook_config.get("avatar", None),
            view=LanguageView(roles_config)
        )

        await webhook.delete()
    except Exception:
        pass